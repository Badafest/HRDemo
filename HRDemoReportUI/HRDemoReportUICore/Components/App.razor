<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="Site.css" />
    <link rel="stylesheet" href="HRDemoReportUICore.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script src="jquery-3.7.0.min.js"></script>
    <script src="bootstrap/bootstrap.min.js"></script>

    @* scripts for PDF generation *@
    <script src="https://unpkg.com/jspdf@3.0.1/dist/jspdf.umd.min.js"></script>
    <script src="https://unpkg.com/jspdf-autotable"></script>

    <script>
        $(document).ready(async function () {
            var buttonId = '#generateEmployeeReportBtn';
            var listId = '#employeeSelectList';
            // Initially disable the button if no value is selected
            // $(buttonId).prop('disabled', $(listId).val().trim() === '0');

            // Enable or disable the button based on the input field value
            $(listId).on('change', function () {
                $(buttonId).prop('disabled', $(this).val().trim() === '0');
            });

            // set hidden field value for timezone offset
            $('#timezoneOffset').val(-1 * new Date().getTimezoneOffset());

            const fontUrls = {
                normal: "/fonts/open-sans.regular.ttf", 
                bold: "/fonts/open-sans.bold.ttf"
            };

            // Fetch the font file and convert it to Base64
            const fontsInBase64 = await Promise.all(Object.entries(fontUrls).map(([weight, fontUrl]) =>
                new Promise(async (resolve, reject) => {
                    const response = await fetch(fontUrl);
                    const fontBlob = await response.blob();
                    const reader = new FileReader();
                    reader.onloadend = () => {
                        const base64data = reader.result.split(',')[1];
                        resolve([weight, base64data]);
                    };
                    reader.onerror = reject;
                    reader.readAsDataURL(fontBlob);
                })
            ));

            const margin = 0.5; // 0.5 inch

            let currentY = 0;
            let pageWidth = 0;
            let pageHeight = 0;

            function formatCurrency(amount) {
                const formatter = new Intl.NumberFormat('en-US', {
                  style: 'currency',
                  currency: 'USD',
                });
                return formatter.format(amount);
            };

            // Doc methods:
            function loadOpenSansFont(doc) {
                // Embed the font into jsPDF
                fontsInBase64.forEach(([weight, fontBase64]) => {
                    const fontFileName = `open-sans.${weight}.ttf`;
                    doc.addFileToVFS(fontFileName, fontBase64, weight);
                    doc.addFont(fontFileName, "OpenSans", weight);
                });
            }

            // Function to add a Horizontal Rule
            function addHr(doc) {
                currentY += 0.2
                doc.setDrawColor(64, 64, 64);
                doc.setLineWidth(0.01);
                doc.line(margin, currentY, pageWidth - margin, currentY);
                currentY += 0.2;
            }

            // Function to add section headers
            function addSectionHeader(doc, title) {
                currentY += 0.1;
                doc.setFont("OpenSans", "bold");
                doc.setFontSize(11);
                doc.text(title, margin, currentY);
                currentY += 0.2;
            }

            // Function to add auto table
            function addTable(doc, tableConfig, equalColumns = true, firstColumnBold = true, lastRowBold = false) {
                const numColumns = (tableConfig?.head ?? tableConfig?.body ?? [])[0].length;
                const numRows = tableConfig?.body?.length ?? 0;

                const config = {
                    ...tableConfig,
                    startY: tableConfig.startY ?? currentY,
                    theme: "plain", 
                    margin: {left: margin, right: margin, ...tableConfig.margin},
                    styles: {
                        fontSize: 10, 
                        font: "OpenSans",
                        lineColor: 80, 
                        lineWidth: 0.01,
                        cellPadding: {top: 0.075, right: 0.1, bottom: 0.075, left: 0.1},
                        ...tableConfig.styles
                    },
                    columnStyles: {...(equalColumns ? Object.fromEntries(
                      Array(numColumns)
                        .fill({ cellWidth: (pageWidth - 2 * margin)/numColumns })
                        .map((data, index) => [index, data]),
                    ) : {}), ...tableConfig.columnStyles},
                    // pageBreak: "auto", Ensures rows move to a new page when space is insufficient
                };

                const didDrawCell = function (data) {
                    // check if this is end of the row
                    if (data.column.index != numColumns - 1) {
                        return;
                    }
                    let availableSpace = pageHeight - margin - data.cursor.y - 0.4;
                    // If remaining space is less than the marginBottom, add a new page
                    if (availableSpace <= margin && data.row.index < numRows) {
                        if (data.row.index >= numRows - 1) {
                            return;
                        }
                        doc.addPage();
                        data.cursor.y = margin - data.row.height;
                        if (config.head?.length > 0) {
                            doc.autoTable({...config, startY: margin, body: [[]]});
                            data.cursor.y = doc.lastAutoTable.finalY - 2 * data.row.height; //Reset cursor position for new page
                        }
                    }
                };

                const willDrawCell = function(data) {
                    const isBold = data.section === "head" || 
                        (lastRowBold && data.row.index == numRows - 1) || 
                        (firstColumnBold && data.column.index == 0);
                    doc.setFont("OpenSans", isBold ? "bold" : "normal");
                }

                doc.autoTable({...config, didDrawCell, willDrawCell});
                currentY = doc.lastAutoTable.finalY;
            }

            // Function to add footer
            function addFooter(doc, pageNumber, totalPages) {
                currentY = pageHeight - margin - 0.4;
                addHr(doc);
                currentY += 0.1;
                doc.setFont("OpenSans", "normal");
                doc.setFontSize(8);
                doc.text(`${new Date().toLocaleDateString("en-US")}`, margin, currentY);
                doc.text(`Page ${pageNumber} of ${totalPages}`, pageWidth - margin, currentY, { align: "right" });
            }

            // define function to download pdf
            window.generatePDF = async function ({reportData, year, month}) {
                const {employeeReport, payrollReports} = reportData;
                const doc = new jspdf.jsPDF({
                    orientation: "portrait",
                    unit: "in",
                    format: "a4"
                });

                loadOpenSansFont(doc);

                currentY = margin;
                pageWidth = doc.internal.pageSize.getWidth();
                pageHeight = doc.internal.pageSize.getHeight();

                // Title
                doc.setFont("OpenSans", "bold");

                doc.setFontSize(20);
                currentY += 0.4;
                doc.text("Monthly Employee Report", margin, currentY);
                currentY += 0.5;

                // Subtitle
                doc.setFontSize(12);
                doc.text(`${employeeReport.firstName} ${employeeReport.lastName} (${employeeReport.state}, ${employeeReport.country})`, margin, currentY);
                currentY += 0.3;

                doc.setFontSize(10);
                doc.text(`${year} ${month}`, margin, currentY);

                addHr(doc);

                // Salary Calculation Table
                addSectionHeader(doc, "Salary Calculation");
                addTable(doc, {
                    body: [["Working Days", `${employeeReport.workingDaysInMonth} (out of ${employeeReport.workingDaysInYear})`], 
                        ["Annual Salary", formatCurrency(employeeReport.annualSalary)], 
                        ["Gross Salary", formatCurrency(employeeReport.monthSalary)], 
                        ["Daily Wage", formatCurrency(employeeReport.monthSalary / employeeReport.workingDaysInMonth)]],
                });

                addHr(doc);

                // Attendance Summary
                addSectionHeader(doc, "Attendance Summary");
                addTable(doc, {
                    body: [["Present Days", employeeReport.presentDays], 
                        ["Late Days", employeeReport.lateDays], 
                        ["Leave Days", employeeReport.leaveDays], 
                        ["Absent Days", employeeReport.absentDays]]
                });

                addHr(doc);

                // Leave Summary
                addSectionHeader(doc, "Leave Summary");
                addTable(doc, {
                    body: [["Sick Leave", employeeReport.sickLeave], 
                        ["Casual Leave", employeeReport.casualLeave], 
                        ["Parental Leave", employeeReport.parentalLeave], 
                        ["Bereavement Leave", employeeReport.bereavementLeave], 
                        ["Unpaid Leave", employeeReport.unpaidLeave]]
                });

                addHr(doc);

                // Payrolls Table
                addSectionHeader(doc, "Payrolls");
                const payrollData = payrollReports?.length ? payrollReports.map(report => [
                    report.grossAmount,
                    report.preTaxDeduction,
                    report.taxDeduction,
                    report.postTaxDeduction,
                    report.netAmount
                ]) : [[]];
                const payrollTotals = payrollData.reduce(
                  (accumulator, current) => {
                    return accumulator.map((num, idx) => num + (current[idx] ?? 0));
                  },
                  Array(5).fill(0)
                );

                addTable(doc, {
                    head: [["Gross Amount", "Pre Tax Deduction", "Tax Deduction", "Post Tax Deduction", "Net Amount"]],
                    body: [...payrollData, payrollTotals].map(values => values.map(formatCurrency))
                }, false, false, true);

                const pageCount = doc.getNumberOfPages();
                // Footers
                for (let i = 1; i <= pageCount; i++) {
                    doc.setPage(i); // Move to the page
                    addFooter(doc, i, pageCount);
                }

                // Save the PDF
                doc.save(`${employeeReport?.firstName}_${employeeReport?.lastName}_${year}_${month}.pdf`);
            }
        });
    </script>
</body>

</html>
